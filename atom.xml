<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>风成的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://liyang.comeonone.com/"/>
  <updated>2020-03-28T03:01:41.636Z</updated>
  <id>http://liyang.comeonone.com/</id>
  
  <author>
    <name>liyang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>每日一问---关于前端安全CSRF</title>
    <link href="http://liyang.comeonone.com/2020/03/28/daily-20200328/"/>
    <id>http://liyang.comeonone.com/2020/03/28/daily-20200328/</id>
    <published>2020-03-27T16:00:00.000Z</published>
    <updated>2020-03-28T03:01:41.636Z</updated>
    
    <content type="html"><![CDATA[<div style="font-size:18px;color:#333;line-height:24px;font-family:楷体;"><h3 id="关于前端安全CSRF"><a href="#关于前端安全CSRF" class="headerlink" title="关于前端安全CSRF"></a>关于前端安全CSRF</h3><blockquote><p>跨站请求伪造（英語：Cross-site request forgery），也被称为 one-click attack 或者 session riding，通常缩写为 CSRF 或者 XSRF， 是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。</p></blockquote></div><h4 id="1-攻击原理"><a href="#1-攻击原理" class="headerlink" title="1.攻击原理"></a><strong>1.攻击原理</strong></h4><p>假设用户登录到不受保护的某银行网站，并且使用会话 cookie 或 JWT cookie 进行身份验证，并进行转账操作</p><pre><code>假如其转账操作的URL地址如下： http://www.examplebank.com/withdraw?account=AccoutName&amp;amount=1000&amp;for=PayeeName</code></pre><p>攻击者欺骗用户执行脚本(通过点击垃圾邮件链接或类似) </p><pre><code>用户进入第三方网站 &lt;img src=&quot;http://www.examplebank.com/withdraw?account=Alice&amp;amount=1000&amp;for=Badman</code></pre><p>由于不受保护的某银行网站的登录信息未过期，服务器将成功地验证用户身份并执行交易</p><p><strong>在CSRF中攻击者并不直接获取用户信息，其只是欺骗用户浏览器，让其以用户的名义进行操作</strong></p><h4 id="2-攻击流程"><a href="#2-攻击流程" class="headerlink" title="2.攻击流程"></a><strong>2.攻击流程</strong></h4><p><img src="https://feng-1256121024.cos.ap-guangzhou.myqcloud.com/blog/img/CSRF-ATTACH.png" alt="image">    </p><h4 id="3-预防策略"><a href="#3-预防策略" class="headerlink" title="3.预防策略"></a><strong>3.预防策略</strong></h4><h5 id="1-检查Referer字段"><a href="#1-检查Referer字段" class="headerlink" title="1.检查Referer字段"></a><strong>1.检查Referer字段</strong></h5><p>HTTP头中有一个Referer字段，这个字段用以标明请求来源于哪个地址。</p><p><img src="https://feng-1256121024.cos.ap-guangzhou.myqcloud.com/blog/img/Referer.png" alt="image"></p><p>在处理敏感数据请求时，通常来说，Referer字段应和请求的地址位于同一域名下。</p><p>以上面银行操作为例，</p><pre><code>Referer字段地址通常应该是转帐按钮所在的网页地址，应该也位于www.examplebank.com之下。</code></pre><p>而如果是CSRF攻击传来的请求，Referer字段会是包含恶意网址的地址，</p><pre><code>不会位于www.examplebank.com之下，这时候服务器就能识别出恶意的访问。</code></pre><p>但存在恶意篡改其Referer字段的可能</p><h5 id="2-token验证"><a href="#2-token验证" class="headerlink" title="2.token验证"></a><strong>2.token验证</strong></h5><pre><code>既然攻击者利用第三方cookie的方式去获取用户信息，并验证用户身份这种方式进行攻击，可以采取增加一个独立的token进行认证，在用户登录信任网站的时候，服务端生成一个唯一token并给到用户，用户每次和服务端通信，都会校验token的有效性，如果校验token失败，则认为可能是 CSRF 攻击而拒绝该请求。</code></pre><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://zh.wikipedia.org/wiki/%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0" target="_blank" rel="noopener">wiki百科</a><br><a href="https://dev.to/maleta/cors-xss-and-csrf-with-examples-in-10-minutes-35k3" target="_blank" rel="noopener">XSS CSRF 例子</a></p><div style="display:none;font-size:18px;color:#333;line-height:24px;font-family:楷体;"><hr><p>title: 每日一问—<br>date: 2020-03-28<br>category: 技术          # 归类<br>tag: [‘技术’]               # 标签<br>tagcloud: [‘技术’]          # 云标签<br>archives: [‘技术’,’每日问题’,’web安全’]           # 归档</p><hr><p>页面字体以及格式</p><pre><code>&lt;div style=&quot;font-size:18px;color:#333;line-height:24px;font-family:楷体;&quot;&gt; &lt;/div&gt;</code></pre><p>问题标题</p><pre><code>&lt;font style=&quot;font-weight:700&quot;&gt;&lt;/font&gt;</code></pre><p>引用</p><pre><code>&lt;font style=&quot;color:blue;&quot;&gt;&lt;/font&gt;</code></pre><p>一般层级</p><pre><code>#### ##### ######</code></pre><p>注意事项</p><pre><code>&lt;font style=&quot;color:red;&quot;&gt;&lt;/font&gt;</code></pre><p>加重</p><pre><code>&lt;font style=&quot;font-weight:700;color:#333;&quot;&gt;&lt;/font&gt;</code></pre> </div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div style=&quot;font-size:18px;color:#333;line-height:24px;font-family:楷体;&quot;&gt;

&lt;h3 id=&quot;关于前端安全CSRF&quot;&gt;&lt;a href=&quot;#关于前端安全CSRF&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
    
      <category term="技术" scheme="http://liyang.comeonone.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术" scheme="http://liyang.comeonone.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>每日一问---关于前端安全XSS</title>
    <link href="http://liyang.comeonone.com/2020/03/27/daily-20200327/"/>
    <id>http://liyang.comeonone.com/2020/03/27/daily-20200327/</id>
    <published>2020-03-26T16:00:00.000Z</published>
    <updated>2020-03-28T02:12:33.008Z</updated>
    
    <content type="html"><![CDATA[<div style="font-size:18px;color:#333;line-height:24px;font-family:楷体;"><h3 id="关于前端安全XSS"><a href="#关于前端安全XSS" class="headerlink" title="关于前端安全XSS"></a>关于前端安全XSS</h3><h4 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a><font style="font-weight:700;color:#333;">XSS</font></h4><blockquote><p><font style="color:blue;">XSS,即 Cross Site Script,中译是跨站脚本攻击；其原本缩写是CSS,但为了和层叠样式表(Cascading Style Sheet)有所区分,因而在安全领域叫做 XSS</font></p></blockquote><p>攻击者通过恶意插入脚本，实现对用户访问网站内容的控制</p><p>其大致分为三种类型</p><h5 id="1-反射型-Reflected-XSS"><a href="#1-反射型-Reflected-XSS" class="headerlink" title="1.反射型(Reflected XSS)"></a><font style="font-weight:700;color:#333;">1.反射型(Reflected XSS)</font></h5><blockquote><p><font style="color:blue;">当服务器端脚本立即使用 web 客户端提供的数据(最常见的是 HTTP 查询参数(例如 HTML 表单提交))来解析并向用户显示结果页面时，这些漏洞就会显现出来</font></p></blockquote><p>反射 XSS 是攻击者发现页面有这样的漏洞时发生的攻击，例如:</p><p>假如页面的HTML是如下</p><pre><code>&lt;body&gt;...&lt;div&gt; showing results for keyword &lt;script&gt;     document.write(        window.location.href.substr(window.location.href.indexOf(&apos;q=&apos;) + 2)    )&lt;/script&gt;&lt;/div&gt;......JavaScript results......&lt;/body&gt;</code></pre><p>在此输入URL地址</p><pre><code>期望的 URL: https://mywebpage.com/search?q=javascript</code></pre><p>如果恶意注入代码如下</p><pre><code>恶意URL: https://mywebpage.com/search?q=&lt;script&gt;恶意代码&lt;/script&gt;</code></pre><p>当攻击者诱使用户点击这种恶意的 URL ，用户敏感数据会被泄露</p><p><font style="font-weight:700">攻击的流程如下</font></p><p><img src="https://feng-1256121024.cos.ap-guangzhou.myqcloud.com/blog/img/reflectedXSS.png" alt="image"></p><h5 id="2-存储型-Stored-XSS"><a href="#2-存储型-Stored-XSS" class="headerlink" title="2.存储型(Stored XSS)"></a><font style="font-weight:700;color:#333;">2.存储型(Stored XSS)</font></h5><blockquote><p><font style="color:blue;">攻击者提供的数据被服务器保存，然后在正常浏览过程中返回给其他用户的“正常”页面上永久显示，而没有适当的 HTML 转义。</font></p></blockquote><p>其攻击流程如下</p><p><img src="https://feng-1256121024.cos.ap-guangzhou.myqcloud.com/blog/img/Cross-Site-ScriptingXSS.png" alt="image"></p><h5 id="3-基于DOM型-DOM-based-XSS"><a href="#3-基于DOM型-DOM-based-XSS" class="headerlink" title="3.基于DOM型(DOM based XSS)"></a><font style="font-weight:700;color:#333;">3.基于DOM型(DOM based XSS)</font></h5><blockquote><p><font style="color:blue;">恶意代码通过 JavaScript 代码完全在客户端反映出来的</font></p></blockquote><p>这种攻击和反射型是类似的，但不同的是，恶意的 URL 部分将不会被发送到服务器。 例如:</p><pre><code>期望 URL: https://mywebpage.com/search?q=javascript</code></pre><p>基于DOM型</p><pre><code>恶意 URL:  https://mywebpage.com/search#q=&lt;script&gt;恶意代码&lt;/script&gt;</code></pre><p>如果在页面中存在</p><pre><code>var text = document.getElementById(&quot;text&quot;);text.innerHTML  = malicious URL</code></pre><p>就会破坏DOM结构，攻击者就可以通过脚本实现控制内容</p><hr><h4 id="如何防护"><a href="#如何防护" class="headerlink" title="如何防护"></a><font style="font-weight:700;color:#333;">如何防护</font></h4><blockquote><p><font style="color:blue;">每一个可以由用户输入并在您的应用程序中使用的值(无论是在服务器端还是在客户端)都应该被视为不受信任的数据，因此应该在使用前进行处理！</font></p></blockquote><h5 id="输入检测"><a href="#输入检测" class="headerlink" title="输入检测"></a><font style="font-weight:700;color:#333;">输入检测</font></h5><p>对用户输入的内容进行检测并转义</p><pre><code>function escapeText(text) {  return text.replace(/&amp;/g, &apos;&amp;amp;&apos;)             .replace(/&lt;/g, &apos;&amp;lt;&apos;)             .replace(/&gt;/g, &apos;&amp;gt;&apos;)             .replace(/&quot;/g, &apos;&amp;quot;&apos;)}</code></pre><h5 id="输出检查"><a href="#输出检查" class="headerlink" title="输出检查"></a><font style="font-weight:700;color:#333;">输出检查</font></h5><p>在服务端数据渲染HTML的时候，使用编码或转义的方式避免  </p><hr><h5 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a><font style="font-weight:700;color:#333;">参考资料</font></h5><p><a href="https://dev.to/maleta/cors-xss-and-csrf-with-examples-in-10-minutes-35k3" target="_blank" rel="noopener">XSS CSRF 例子</a><br><a href="https://github.com/dwqs/blog/issues/68" target="_blank" rel="noopener">github book</a><br><font style="color:blue;">&lt;&lt;白帽子讲 Web 安全&gt;&gt;</font></p></div><div style="display:none;font-size:18px;color:#333;line-height:24px;font-family:楷体;"><p>页面字体以及格式</p><pre><code>&lt;div style=&quot;font-size:18px;color:#333;line-height:24px;font-family:楷体;&quot;&gt; &lt;/div&gt;</code></pre><p>问题标题</p><pre><code>&lt;font style=&quot;font-weight:700&quot;&gt;&lt;/font&gt;</code></pre><p>引用</p><pre><code>&lt;font style=&quot;color:blue;&quot;&gt;&lt;/font&gt;</code></pre><p>一般层级</p><pre><code>#### ##### ######</code></pre><p>注意事项</p><pre><code>&lt;font style=&quot;color:red;&quot;&gt;&lt;/font&gt;</code></pre><p>加重</p><pre><code>&lt;font style=&quot;font-weight:700;color:#333;&quot;&gt;&lt;/font&gt;</code></pre> </div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div style=&quot;font-size:18px;color:#333;line-height:24px;font-family:楷体;&quot;&gt;

&lt;h3 id=&quot;关于前端安全XSS&quot;&gt;&lt;a href=&quot;#关于前端安全XSS&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
    
      <category term="技术" scheme="http://liyang.comeonone.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术" scheme="http://liyang.comeonone.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>每日一问---React中render函数</title>
    <link href="http://liyang.comeonone.com/2020/03/26/daily-20200326/"/>
    <id>http://liyang.comeonone.com/2020/03/26/daily-20200326/</id>
    <published>2020-03-25T16:00:00.000Z</published>
    <updated>2020-03-28T02:11:46.698Z</updated>
    
    <content type="html"><![CDATA[<div style="font-size:18px;color:#333;line-height:20px;font-family:楷体;"><h4 id="React中关于render函数返回一个元素"><a href="#React中关于render函数返回一个元素" class="headerlink" title="React中关于render函数返回一个元素 "></a><font style="font-weight:700;color:#333;font-size:20px;">React中关于render函数返回一个元素 </font></h4><h5 id="问题需求"><a href="#问题需求" class="headerlink" title="问题需求 "></a><font style="font-weight:700;color:#333;">问题需求 </font></h5><pre><code>当在render返回的方法中，需要返回多个根节点时候会如何</code></pre><h5 id="关于Jsx"><a href="#关于Jsx" class="headerlink" title="关于Jsx "></a><font style="font-weight:700;color:#333;">关于Jsx </font></h5><p><font style="color:blue;">由于react jsx是javascript的语法拓展，其本质是 通过React.createElement(type, config, children)来返回一个React元素</font></p><pre><code>class App extends React.Component {  render(){    return (      &lt;div&gt;      hello      &lt;/div&gt;    );  }}</code></pre><p>转变这样</p><pre><code>_createClass(App, [{    key: &apos;render&apos;,    value: function render() {      return React.createElement(&quot;div&quot;, null, &quot;hello&quot;);    }}]);</code></pre><p>如果写成多个元素</p><pre><code>class App extends React.Component {  render(){    return (      &lt;div&gt;      hello      &lt;/div&gt;      &lt;h1&gt;more&lt;/h1&gt;    );  }}</code></pre><p>其将会装换为</p><pre><code>_createClass(App, [{    key: &apos;render&apos;,    value: function render() {      return React.createElement(&quot;div&quot;, null, &quot;hello&quot;);      return React.createElement(&quot;h1&quot;, null, &quot;more&quot;);    }}]);</code></pre><p>其实际上不会转换成功(将会报错 Adjacent JSX elements must be wrapped in an enclosing tag)其方法return两次，这显然是错误</p><h5 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h5><h6 id="1-父元素包裹"><a href="#1-父元素包裹" class="headerlink" title="1.父元素包裹 "></a><font style="font-weight:700;color:#333;">1.父元素包裹 </font></h6><pre><code>render() {  return (    &lt;div&gt;      &lt;h1&gt;foo&lt;/h1&gt;      &lt;h2&gt;bar&lt;/h2&gt;    &lt;/div&gt;  );}</code></pre><h6 id="2-采用-Fragment"><a href="#2-采用-Fragment" class="headerlink" title="2.采用 Fragment  "></a><font style="font-weight:700;color:#333;">2.采用 Fragment  </font></h6><p>在 React v16.2+以上版本中可以才用Fragment片段的方式</p><pre><code>render() {    return (      &lt;React.Fragment&gt;        &lt;td&gt;Hello&lt;/td&gt;        &lt;td&gt;World&lt;/td&gt;      &lt;/React.Fragment&gt;    );}  </code></pre><h6 id="3-短语法-lt-gt-lt-gt"><a href="#3-短语法-lt-gt-lt-gt" class="headerlink" title="3.短语法 &lt;&gt; &lt;/&gt;  "></a><font style="font-weight:700;color:#333;">3.短语法 &lt;&gt; &lt;/&gt;  </font></h6><pre><code>render() {    return (      &lt;&gt;        &lt;td&gt;Hello&lt;/td&gt;        &lt;td&gt;World&lt;/td&gt;      &lt;/&gt;    ); }jsx部分 其转换为React.createElement(React.Fragment, null,     React.createElement(&quot;td&quot;, null, &quot;Hello&quot;),     React.createElement(&quot;td&quot;, null, &quot;World&quot;));    </code></pre><p>可以看出 其实际上是React.Fragment的语法糖 可以写成</p><pre><code>render() {  return (    &lt;React.Fragment&gt;    &lt;td&gt;Hello&lt;/td&gt;    &lt;td&gt;World&lt;/td&gt;    &lt;/React.Fragment&gt;  );}</code></pre><h6 id="4-返回数组"><a href="#4-返回数组" class="headerlink" title="4.返回数组 "></a><font style="font-weight:700;color:#333;">4.返回数组 </font></h6><p>在 React v16.0+以上版本中可以才用返回数组的方式</p><pre><code>render(){    return [&lt;div key={0}&gt;hello&lt;/div&gt;,&lt;div key={1}&gt;world&lt;/div&gt;]}</code></pre><p>其会转化为</p><pre><code>return [    React.createElement(&quot;div&quot;, {key: 0}, &quot;hello&quot;),    React.createElement(&quot;div&quot;, {key: 1}, &quot;world&quot;)];</code></pre><h5 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h5><p><a href="https://stackoverflow.com/questions/31284169/parse-error-adjacent-jsx-elements-must-be-wrapped-in-an-enclosing-tag" target="_blank" rel="noopener">Adjacent JSX error</a></p><p><a href="https://zh-hans.reactjs.org/docs/fragments.html#short-syntax" target="_blank" rel="noopener">React fragments</a></p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div style=&quot;font-size:18px;color:#333;line-height:20px;font-family:楷体;&quot;&gt;

&lt;h4 id=&quot;React中关于render函数返回一个元素&quot;&gt;&lt;a href=&quot;#React中关于render函数返回一个元素&quot; 
      
    
    </summary>
    
    
      <category term="技术" scheme="http://liyang.comeonone.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术" scheme="http://liyang.comeonone.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>每日一问---Class类中this绑定</title>
    <link href="http://liyang.comeonone.com/2020/03/25/daily-20200325/"/>
    <id>http://liyang.comeonone.com/2020/03/25/daily-20200325/</id>
    <published>2020-03-24T16:00:00.000Z</published>
    <updated>2020-03-28T02:11:53.113Z</updated>
    
    <content type="html"><![CDATA[<div style="font-size:18px;color:#333;line-height:20px;font-family:楷体;"><h4 id="class类中this绑定"><a href="#class类中this绑定" class="headerlink" title="class类中this绑定 "></a><font style="font-weight:700;color:#333;font-size:20px;">class类中this绑定 </font></h4><p><font style="color:blue;">类的方法内部如果含有this,默认指向类的实例,但是一些场景下使用,会导致this的指向偏离预期，所以需要绑定定义时候的this,也就是实例对象</font></p><p>如下</p><pre><code>&lt;!--html--&gt;&lt;button id=&quot;btn&quot;&gt;click&lt;/button&gt;&lt;!--js--&gt;const btn = document.getElementById(&apos;btn&apos;);class CheckThis {  constructor(ele) {    this.ele = ele;    this.count = 0;    this.ele.addEventListener(&apos;click&apos;, this.click);  }  click() {    console.log(this); // DOM    this.count++;    console.log(this.count); // NaN  }}const thisInstance = new CheckThis(btn);</code></pre><p>在这里click方法中的this指的是dom节点而不是实例对象,</p><p><font style="color:blue;">因为addEventListener()将this的指针设置为冒泡事件的DOM元素</font></p><p>相当于 </p><pre><code>var m = this.click;this.ele.addEventListener(&apos;click&apos;, m) //此时m函数中this的指向创建事件的元素</code></pre><p>再看一个例子</p><pre><code>import React, { PureComponent } from &apos;react&apos;;class Index extends PureComponent {    testHandle(){       console.log(this); // undefined    };    reder(){        return (            &lt;Button onClick={this.testHandle}&gt;click&lt;/Button&gt;        )    }}</code></pre><p>React事件为合成事件，class并不会为方法自动绑定this到当前对象上,再由于<font style="color:red;">class 内部是严格模式</font>，所以 this 实际指向的是undefined,为避免这种this指向问题有几种方法来解决这种问题</p><h5 id="1-使用箭头函数"><a href="#1-使用箭头函数" class="headerlink" title=" 1.使用箭头函数"></a><font style="font-weight:700;color:#333;"> 1.使用箭头函数</font></h5><p><font style="color:blue;">直接在React元素中采用箭头函数</font>   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; PureComponent &#125; from &#39;react&#39;;</span><br><span class="line">class Index extends PureComponent &#123;</span><br><span class="line">    testHandle()&#123;</span><br><span class="line">       console.log(this); &#x2F;&#x2F; Index实例对象</span><br><span class="line">    &#125;;</span><br><span class="line">    reder()&#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;Button onClick&#x3D;&#123;(event)&#x3D;&gt;this.testHandle(event)&#125;&gt;click&lt;&#x2F;Button&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为箭头函数中的this指向的是函数定义的对象,所以可以保证this总是指向当前组件的实例对象<br>优化点：直接在render方法中为元素事件定义事件的处理函数，每次render调用时，都会创建一个新的事件处理函数，带来额外的性能开销</p><h5 id="2-组件方法"><a href="#2-组件方法" class="headerlink" title=" 2.组件方法"></a><font style="font-weight:700;color:#333;"> 2.组件方法</font></h5><p><font style="color:blue;">直接将组件的方法赋值给元素的事件属性，同时在类的构造函数中，将这个方法的this绑定到当前对象。</font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; PureComponent &#125; from &#39;react&#39;;</span><br><span class="line">class Index extends PureComponent &#123;</span><br><span class="line">    constructor(props)&#123;</span><br><span class="line">        super(props);</span><br><span class="line">        this.state&#x3D;&#123;&#125;</span><br><span class="line">        this.testHandle &#x3D; this.testHandle.bind(this);</span><br><span class="line">    &#125;</span><br><span class="line">    testHandle()&#123;</span><br><span class="line">       console.log(this); &#x2F;&#x2F; Index实例对象</span><br><span class="line">    &#125;;</span><br><span class="line">    reder()&#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;Button onClick&#x3D;&#123;this.testHandle&#125;&gt;click&lt;&#x2F;Button&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式的好处是每次render不会重新创建一个回调函数，没有额外的性能损失。但在构造函数中，为事件处理函数绑定this， 尤其是存在多个事件处理函数需要绑定时,这种模板式的代码还是会显得烦琐。而且对于函数传递参数来说不太方便</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; PureComponent &#125; from &#39;react&#39;;</span><br><span class="line">class Index extends PureComponent &#123;</span><br><span class="line">    testHandle(params)&#123;</span><br><span class="line">       console.log(this,params); &#x2F;&#x2F; Index实例对象, &#123; test: &#39;1&#39; &#125;; </span><br><span class="line">    &#125;;</span><br><span class="line">    reder()&#123;</span><br><span class="line">        const params &#x3D; &#123; test: &#39;1&#39; &#125;;</span><br><span class="line">        return(</span><br><span class="line">             &lt;Button onClick&#x3D;&#123;this.testHandle.bind(this,params)&#125;&gt;click&lt;&#x2F;Button&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式依然存在每次render都会创建一个函数的问题，但在需要为处理<font style="color:red;">传递额外参数</font>提供便利</p><h5 id="3-属性初始化语法"><a href="#3-属性初始化语法" class="headerlink" title=" 3.属性初始化语法"></a><font style="font-weight:700;color:#333;"> 3.属性初始化语法</font></h5><p><font style="color:blue;">使用ES 7的property initializers会自动为class中定义的方法绑定this</font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; PureComponent &#125; from &#39;react&#39;;</span><br><span class="line">class Index extends PureComponent &#123;</span><br><span class="line">    testHandle &#x3D; (params)&#x3D;&gt;&#123;</span><br><span class="line">       console.log(this,params); &#x2F;&#x2F; Index实例对象, &#123; test: &#39;1&#39; &#125;; </span><br><span class="line">    &#125;;</span><br><span class="line">    reder()&#123;</span><br><span class="line">        const params &#x3D; &#123; test: &#39;1&#39; &#125;;</span><br><span class="line">        return(</span><br><span class="line">             &lt;Button onClick&#x3D;&#123;this.testHandle&#125;&gt;click&lt;&#x2F;Button&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式既不需要在构造函数中手动绑定this， 也不需要担心组件重复渲染导致的函数重复创建问题。但是， property initializers这个特性还处于试验阶段， 默认是不支持的,不过， 使用官方脚手架Create React App创建的项目默认是支持这个特性的。你也可以自行在项目中引入babel的transform-class-properties插件获取这个特性支持。</p><h5 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h5><p>引用 <a href="">React+进阶之路</a></p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div style=&quot;font-size:18px;color:#333;line-height:20px;font-family:楷体;&quot;&gt;


&lt;h4 id=&quot;class类中this绑定&quot;&gt;&lt;a href=&quot;#class类中this绑定&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="技术" scheme="http://liyang.comeonone.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术" scheme="http://liyang.comeonone.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
</feed>
